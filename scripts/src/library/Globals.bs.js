// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function indexOf(prim0, prim1) {
  return prim0.indexOf(prim1);
}

function match_(prim0, prim1) {
  return Caml_option.null_to_opt(prim0.match(prim1));
}

function substring(prim0, prim1, prim2) {
  return prim0.substring(prim1, prim2);
}

var removePrefixUnderscores = ((someString) => {
  if (someString.charAt(0) == "_") {
    return someString.slice(1)
  } else {
    return someString
  }
});

function formatKeywords(keyword) {
  if (keyword === "to") {
    return "_" + keyword;
  } else {
    return removePrefixUnderscores(keyword);
  }
}

var lowerCaseFirstLetter = ((someString) => someString.charAt(0).toLowerCase() + someString.slice(1));

function reduceStrArr(arr) {
  return Belt_Array.reduce(arr, "", (function (acc, curr) {
                return acc + curr;
              }));
}

function contains(str, subst) {
  return str.indexOf(subst) !== -1;
}

function containsRe(str, re) {
  return Belt_Option.isSome(Caml_option.null_to_opt(str.match(re)));
}

function commafiy(strings) {
  var mockerParameterCalls = Belt_Array.reduce(strings, "", (function (acc, curr) {
          return acc + curr + ",";
        }));
  if (mockerParameterCalls.length !== 0) {
    return mockerParameterCalls.substring(0, mockerParameterCalls.length - 1 | 0);
  } else {
    return mockerParameterCalls;
  }
}

exports.indexOf = indexOf;
exports.match_ = match_;
exports.substring = substring;
exports.removePrefixUnderscores = removePrefixUnderscores;
exports.formatKeywords = formatKeywords;
exports.lowerCaseFirstLetter = lowerCaseFirstLetter;
exports.reduceStrArr = reduceStrArr;
exports.contains = contains;
exports.containsRe = containsRe;
exports.commafiy = commafiy;
/* No side effect */
